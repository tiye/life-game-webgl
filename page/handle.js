// Generated by CoffeeScript 1.4.0
var camera, coin, h, mouseX, mouseY, p, particles, renderer, scene, w, world;

coin = function() {
  var a;
  a = Math.random();
  return a > 0.95;
};

world = {};

camera = {};

scene = {};

renderer = {};

particles = [];

mouseX = 0;

mouseY = 0;

p = function(x, y) {
  return "" + x + "&" + y;
};

w = 70;

h = 40;

window.onload = function() {
  var init, makePaticles, particleRender, updateParticles;
  init = function() {
    var update;
    camera = new THREE.PerspectiveCamera(80, window.innerWidth / window.innerHeight, 1, 4000);
    camera.position.z = 1000;
    scene = new THREE.Scene();
    scene.add(camera);
    renderer = new THREE.CanvasRenderer();
    renderer.setSize(window.innerWidth, window.innerHeight);
    document.body.appendChild(renderer.domElement);
    makePaticles();
    return (update = function() {
      updateParticles();
      renderer.render(scene, camera);
      return requestAnimationFrame(update);
    })();
  };
  makePaticles = function() {
    var _i, _results;
    return (function() {
      _results = [];
      for (var _i = -w; -w <= w ? _i <= w : _i >= w; -w <= w ? _i++ : _i--){ _results.push(_i); }
      return _results;
    }).apply(this).forEach(function(x) {
      var _i, _results;
      return (function() {
        _results = [];
        for (var _i = -h; -h <= h ? _i <= h : _i >= h; -h <= h ? _i++ : _i--){ _results.push(_i); }
        return _results;
      }).apply(this).forEach(function(y) {
        var material, particle;
        material = new THREE.ParticleCanvasMaterial({
          color: 0x000000,
          program: particleRender
        });
        particle = new THREE.Particle(material);
        particle.position.x = x * 2;
        particle.position.y = y * 2;
        particle.position.z = 800;
        world[p(x, y)] = {
          position: {
            x: x,
            y: y
          },
          particle: particle,
          life: coin()
        };
        scene.add(particle);
        return particles.push(particle);
      });
    });
  };
  particleRender = function(context) {
    context.beginPath();
    context.arc(0, 0, 1, 0, Math.PI * 2, true);
    return context.fill();
  };
  updateParticles = function() {
    var a, b, count, key, me, point, value, x, y, _i, _j, _ref, _ref1, _ref2, _ref3, _results;
    _results = [];
    for (key in world) {
      value = world[key];
      count = 0;
      x = value.position.x;
      y = value.position.y;
      for (a = _i = _ref = x - 1, _ref1 = x + 1; _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; a = _ref <= _ref1 ? ++_i : --_i) {
        if (count > 3) {
          break;
        }
        for (b = _j = _ref2 = y - 1, _ref3 = y + 1; _ref2 <= _ref3 ? _j <= _ref3 : _j >= _ref3; b = _ref2 <= _ref3 ? ++_j : --_j) {
          me = world[p(a, b)];
          if (!(x === 0 && y === 0)) {
            if (me != null) {
              if (me.life) {
                count += 1;
              }
            }
          }
        }
      }
      point = world[key];
      if (count === 3) {
        if (!point.life) {
          point.life = true;
          _results.push(point.particle.material.color.r = 0.4);
        } else {
          _results.push(void 0);
        }
      } else if (count !== 2) {
        if (point.life) {
          point.life = false;
          _results.push(point.particle.material.color.r = 0);
        } else {
          _results.push(void 0);
        }
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };
  return init();
};
